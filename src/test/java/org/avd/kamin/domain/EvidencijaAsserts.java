package org.avd.kamin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EvidencijaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvidencijaAllPropertiesEquals(Evidencija expected, Evidencija actual) {
        assertEvidencijaAutoGeneratedPropertiesEquals(expected, actual);
        assertEvidencijaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvidencijaAllUpdatablePropertiesEquals(Evidencija expected, Evidencija actual) {
        assertEvidencijaUpdatableFieldsEquals(expected, actual);
        assertEvidencijaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvidencijaAutoGeneratedPropertiesEquals(Evidencija expected, Evidencija actual) {
        assertThat(expected)
            .as("Verify Evidencija auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvidencijaUpdatableFieldsEquals(Evidencija expected, Evidencija actual) {
        assertThat(expected)
            .as("Verify Evidencija relevant properties")
            .satisfies(e -> assertThat(e.getNazivEvidencija()).as("check nazivEvidencija").isEqualTo(actual.getNazivEvidencija()))
            .satisfies(e -> assertThat(e.getVrijemeUsluge()).as("check vrijemeUsluge").isEqualTo(actual.getVrijemeUsluge()))
            .satisfies(e -> assertThat(e.getKomentar()).as("check komentar").isEqualTo(actual.getKomentar()))
            .satisfies(e -> assertThat(e.getImeStanara()).as("check imeStanara").isEqualTo(actual.getImeStanara()))
            .satisfies(e -> assertThat(e.getPrezimeStanara()).as("check prezimeStanara").isEqualTo(actual.getPrezimeStanara()))
            .satisfies(e -> assertThat(e.getKontaktStanara()).as("check kontaktStanara").isEqualTo(actual.getKontaktStanara()))
            .satisfies(e -> assertThat(e.getDatumIspravka()).as("check datumIspravka").isEqualTo(actual.getDatumIspravka()))
            .satisfies(e -> assertThat(e.getKomentarIspravka()).as("check komentarIspravka").isEqualTo(actual.getKomentarIspravka()))
            .satisfies(e -> assertThat(e.getKucniBroj()).as("check kucniBroj").isEqualTo(actual.getKucniBroj()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvidencijaUpdatableRelationshipsEquals(Evidencija expected, Evidencija actual) {
        assertThat(expected)
            .as("Verify Evidencija relationships")
            .satisfies(e -> assertThat(e.getRaspored()).as("check raspored").isEqualTo(actual.getRaspored()))
            .satisfies(e -> assertThat(e.getVrstaUsluge()).as("check vrstaUsluge").isEqualTo(actual.getVrstaUsluge()))
            .satisfies(e -> assertThat(e.getStatusEvidencije()).as("check statusEvidencije").isEqualTo(actual.getStatusEvidencije()));
    }
}
